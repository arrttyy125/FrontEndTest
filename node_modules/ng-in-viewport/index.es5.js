import { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, Output } from '@angular/core';

var InViewportConfigDirection = {};
InViewportConfigDirection.Both = 0;
InViewportConfigDirection.Vertical = 1;
InViewportConfigDirection.Horizontal = 2;
InViewportConfigDirection[InViewportConfigDirection.Both] = "Both";
InViewportConfigDirection[InViewportConfigDirection.Vertical] = "Vertical";
InViewportConfigDirection[InViewportConfigDirection.Horizontal] = "Horizontal";
var InViewportConfig = (function () {
    /**
     * @param {?=} options
     */
    function InViewportConfig(options) {
        this.rootElement = (options && options.rootElement)
            ? options.rootElement
            : void 0;
        this.partial = (options && 'partial' in options)
            ? options.partial
            : true;
        this.direction = (options && 'direction' in options)
            ? options.direction
            : InViewportConfigDirection.Both;
    }
    Object.defineProperty(InViewportConfig.prototype, "rootElement", {
        /**
         * @return {?}
         */
        get: function () {
            return this._rootElement;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._rootElement = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "partial", {
        /**
         * @return {?}
         */
        get: function () {
            return this._partial;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._partial = !!(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "direction", {
        /**
         * @return {?}
         */
        get: function () {
            return this._direction;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._direction = value;
        },
        enumerable: true,
        configurable: true
    });
    return InViewportConfig;
}());

var InViewportService = (function () {
    function InViewportService() {
        this.registry = [];
        this.trigger$ = new EventEmitter();
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    InViewportService.prototype.onChanges = function (entries) {
        this.trigger$.emit(entries);
    };
    /**
     * @param {?} rootElement
     * @return {?}
     */
    InViewportService.prototype.findRegistryEntry = function (rootElement) {
        var _this = this;
        return this.registry.find(function (item) { return item.rootElement === _this.getRootElement(rootElement); });
    };
    /**
     * @param {?} target
     * @param {?=} rootElement
     * @return {?}
     */
    InViewportService.prototype.addTarget = function (target, rootElement) {
        var _this = this;
        var /** @type {?} */ registryEntry = this.findRegistryEntry(rootElement);
        if (!registryEntry) {
            var /** @type {?} */ registryEntryObserverOptions = {
                root: this.getRootElement(rootElement),
                threshold: Array(101).fill(void 0).map(function (item, i) { return (i / 100); })
            };
            registryEntry = {
                targets: [target],
                rootElement: this.getRootElement(rootElement),
                observer: new IntersectionObserver(function (entries) { return _this.onChanges(entries); }, registryEntryObserverOptions)
            };
            registryEntry.observer.observe(target);
            this.registry.push(registryEntry);
        }
        else if (registryEntry.targets.indexOf(target) < 0) {
            registryEntry.targets.push(target);
            registryEntry.observer.observe(target);
        }
    };
    /**
     * @param {?} target
     * @param {?=} rootElement
     * @return {?}
     */
    InViewportService.prototype.removeTarget = function (target, rootElement) {
        var /** @type {?} */ registryEntry = this.findRegistryEntry(rootElement);
        var /** @type {?} */ registryEntryIdx = this.registry.indexOf(registryEntry);
        if (registryEntry) {
            var /** @type {?} */ targetIdx = registryEntry.targets.indexOf(target);
            if (targetIdx >= 0) {
                registryEntry.observer.unobserve(target);
                registryEntry.targets.splice(targetIdx, 1);
            }
            if (registryEntry.targets.length === 0) {
                registryEntry.observer.disconnect();
                this.registry.splice(registryEntryIdx, 1);
            }
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    InViewportService.prototype.getRootElement = function (element) {
        return (element && element.nodeType === 1) ? element : null;
    };
    return InViewportService;
}());
InViewportService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
InViewportService.ctorParameters = function () { return []; };

var InViewportDirective = (function () {
    /**
     * @param {?} elementRef
     * @param {?} inViewportService
     */
    function InViewportDirective(elementRef, inViewportService) {
        this.elementRef = elementRef;
        this.inViewportService = inViewportService;
        this.config = new InViewportConfig();
        this.action$ = new EventEmitter();
    }
    Object.defineProperty(InViewportDirective.prototype, "updateConfig", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (value && Object.prototype.toString.call(value) === '[object Object]') {
                if (value.rootElement instanceof Element) {
                    this.config.rootElement = value.rootElement;
                }
                if ('partial' in value) {
                    this.config.partial = value.partial;
                }
                if ('direction' in value) {
                    this.config.rootElement = value.direction;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InViewportDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.inViewportService.trigger$.subscribe(function (entries) { return _this.check(entries); });
        this.inViewportService.addTarget(this.elementRef.nativeElement, this.config.rootElement);
    };
    /**
     * @return {?}
     */
    InViewportDirective.prototype.ngOnDestroy = function () {
        this.inViewportService.removeTarget(this.elementRef.nativeElement);
    };
    /**
     * @param {?} entries
     * @return {?}
     */
    InViewportDirective.prototype.check = function (entries) {
        var _this = this;
        var /** @type {?} */ entry = entries.find(function (item) { return item.target === _this.elementRef.nativeElement; });
        if (entry) {
            var /** @type {?} */ value = this.config.partial ? (entry.intersectionRatio > 0) : (entry.intersectionRatio === 1);
            this.action$.emit({
                target: entry.target,
                value: value
            });
        }
    };
    return InViewportDirective;
}());
InViewportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[in-viewport], [inViewport]'
            },] },
];
/**
 * @nocollapse
 */
InViewportDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: InViewportService, },
]; };
InViewportDirective.propDecorators = {
    'action$': [{ type: Output, args: ['inViewportAction',] },],
    'updateConfig': [{ type: Input, args: ['inViewportOptions',] },],
};

var InViewportModule = (function () {
    /**
     * @param {?} inViewportService
     */
    function InViewportModule(inViewportService) {
        this.inViewportService = inViewportService;
    }
    /**
     * @return {?}
     */
    InViewportModule.forRoot = function () {
        return {
            ngModule: InViewportModule,
            providers: [
                InViewportService
            ]
        };
    };
    return InViewportModule;
}());
InViewportModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [
                    InViewportDirective
                ],
                exports: [
                    InViewportDirective
                ]
            },] },
];
/**
 * @nocollapse
 */
InViewportModule.ctorParameters = function () { return [
    { type: InViewportService, },
]; };

/**
 * Generated bundle index. Do not edit.
 */

export { InViewportModule, InViewportService, InViewportConfig, InViewportConfigDirection, InViewportDirective };
