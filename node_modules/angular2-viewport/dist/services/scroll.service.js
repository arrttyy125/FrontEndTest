var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { throttler } from '../helpers';
const BUFFER_TIME = 100;
const DEBOUNCE_TIME = 180;
const THROTTLE_TIME = 180;
let ScrollService = ScrollService_1 = class ScrollService {
    constructor() {
        this._subj = new Subject();
        this.boundSet = new Set();
        this.handler = ScrollService_1._handler.bind(this);
        this.onScroll = this._subj.throttleTime(BUFFER_TIME).share();
        this.onScrollEnd = this._subj.debounceTime(DEBOUNCE_TIME).share();
        this.onScrollStart = throttler(this._subj, THROTTLE_TIME);
        this.bind(window);
    }
    /**
     * Binds its listener to the event target
     * to trigger checking position of in-view directive
     * or for emiting its scroll events
     *
     * Returns the unbinding function
     */
    bind(target) {
        if (!this.boundSet.has(target)) {
            target.addEventListener('scroll', this.handler);
            this.boundSet.add(target);
        }
        return this.unbind.bind(this, target);
    }
    /**
     * Removes its listener from the target
     */
    unbind(target) {
        this.boundSet.delete(target);
        target.removeEventListener('scroll', this.handler);
    }
    static _handler(e) {
        this._subj.next(e);
    }
};
ScrollService = ScrollService_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], ScrollService);
export { ScrollService };
var ScrollService_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Njcm9sbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUN4QixNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUM7QUFDMUIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBRzFCLElBQWEsYUFBYSxxQkFBMUI7SUFvQkM7UUFuQlEsVUFBSyxHQUFtQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLGFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFDO1FBbUJ6QyxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsRSxJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLElBQUksQ0FBQyxNQUFtQjtRQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBbUI7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQXNCLENBQU87UUFDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEIsQ0FBQztDQUNELENBQUE7QUF2RFksYUFBYTtJQUR6QixVQUFVLEVBQUU7O0dBQ0EsYUFBYSxDQXVEekI7U0F2RFksYUFBYSIsImZpbGUiOiJzZXJ2aWNlcy9zY3JvbGwuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgdGhyb3R0bGVyIH0gZnJvbSAnLi4vaGVscGVycyc7XHJcblxyXG5jb25zdCBCVUZGRVJfVElNRSA9IDEwMDtcclxuY29uc3QgREVCT1VOQ0VfVElNRSA9IDE4MDtcclxuY29uc3QgVEhST1RUTEVfVElNRSA9IDE4MDtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNjcm9sbFNlcnZpY2Uge1xyXG5cdHByaXZhdGUgX3N1Ymo6IFN1YmplY3Q8RXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcclxuXHRwcml2YXRlIGJvdW5kU2V0ID0gbmV3IFNldDxFdmVudFRhcmdldD4oKTtcclxuXHRwcml2YXRlIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRocm90dGxlZCBTY3JvbGwgRXZlbnQgb2YgYm91bmQgdGFyZ2V0c1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBvblNjcm9sbDogT2JzZXJ2YWJsZTxFdmVudD47XHJcblx0XHJcblx0LyoqXHJcblx0ICogRW1pdHMgd2hlbiB0aGUgc2Nyb2xsaW5nIGlzIHN0YXJ0ZWQgb24gYm91bmQgdGFyZ2V0c1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBvblNjcm9sbFN0YXJ0OiBPYnNlcnZhYmxlPEV2ZW50PjtcclxuXHJcblx0LyoqXHJcblx0ICogRW1pdHMgd2hlbiB0aGUgc2Nyb2xsaW5nIGlzIGZpbmlzaGVkIG9uIGJvdW5kIHRhcmdldHNcclxuXHQgKi9cclxuXHRwdWJsaWMgb25TY3JvbGxFbmQ6IE9ic2VydmFibGU8RXZlbnQ+O1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuaGFuZGxlciA9IFNjcm9sbFNlcnZpY2UuX2hhbmRsZXIuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMub25TY3JvbGwgPSB0aGlzLl9zdWJqLnRocm90dGxlVGltZShCVUZGRVJfVElNRSkuc2hhcmUoKTtcclxuXHRcdHRoaXMub25TY3JvbGxFbmQgPSB0aGlzLl9zdWJqLmRlYm91bmNlVGltZShERUJPVU5DRV9USU1FKS5zaGFyZSgpO1xyXG5cdFx0dGhpcy5vblNjcm9sbFN0YXJ0ID0gdGhyb3R0bGVyKHRoaXMuX3N1YmosIFRIUk9UVExFX1RJTUUpO1xyXG5cdFx0dGhpcy5iaW5kKHdpbmRvdyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBCaW5kcyBpdHMgbGlzdGVuZXIgdG8gdGhlIGV2ZW50IHRhcmdldFxyXG5cdCAqIHRvIHRyaWdnZXIgY2hlY2tpbmcgcG9zaXRpb24gb2YgaW4tdmlldyBkaXJlY3RpdmVcclxuXHQgKiBvciBmb3IgZW1pdGluZyBpdHMgc2Nyb2xsIGV2ZW50c1xyXG5cdCAqIFxyXG5cdCAqIFJldHVybnMgdGhlIHVuYmluZGluZyBmdW5jdGlvblxyXG5cdCAqL1xyXG5cdHB1YmxpYyBiaW5kKHRhcmdldDogRXZlbnRUYXJnZXQpOiBGdW5jdGlvbiB7XHJcblx0XHRpZiAoIXRoaXMuYm91bmRTZXQuaGFzKHRhcmdldCkpIHtcclxuXHRcdFx0dGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlcik7XHJcblx0XHRcdHRoaXMuYm91bmRTZXQuYWRkKHRhcmdldCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudW5iaW5kLmJpbmQodGhpcywgdGFyZ2V0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgaXRzIGxpc3RlbmVyIGZyb20gdGhlIHRhcmdldFxyXG5cdCAqL1xyXG5cdHB1YmxpYyB1bmJpbmQodGFyZ2V0OiBFdmVudFRhcmdldCk6dm9pZCB7XHJcblx0XHR0aGlzLmJvdW5kU2V0LmRlbGV0ZSh0YXJnZXQpO1xyXG5cdFx0dGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBfaGFuZGxlcih0aGlzOiBTY3JvbGxTZXJ2aWNlLCBlOkV2ZW50KTp2b2lkIHtcclxuXHRcdHRoaXMuX3N1YmoubmV4dChlKTtcclxuXHR9XHJcbn0iXX0=
