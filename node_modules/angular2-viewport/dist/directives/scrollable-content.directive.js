var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input } from '@angular/core';
import { ScrollService } from '../services';
let ScrollableContentDirective = class ScrollableContentDirective {
    constructor(el, scroll) {
        this.el = el;
        this.scroll = scroll;
    }
    ngAfterViewInit() {
        this.scrollTarget = this.targetSelector ? this.el.nativeElement.querySelector(this.targetSelector) : this.el.nativeElement;
        this.scroll.bind(this.scrollTarget);
    }
    ngOnDestroy() {
        this.scroll.unbind(this.scrollTarget);
    }
};
__decorate([
    Input('vp-scrollable-content'),
    __metadata("design:type", String)
], ScrollableContentDirective.prototype, "targetSelector", void 0);
ScrollableContentDirective = __decorate([
    Directive({
        selector: '[vp-scrollable-content]'
    }),
    __metadata("design:paramtypes", [ElementRef,
        ScrollService])
], ScrollableContentDirective);
export { ScrollableContentDirective };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvc2Nyb2xsYWJsZS1jb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUs1QyxJQUFhLDBCQUEwQixHQUF2QztJQUtDLFlBQ1MsRUFBYyxFQUNkLE1BQXFCO1FBRHJCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQzNCLENBQUM7SUFFSixlQUFlO1FBQ2QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDM0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRCxDQUFBO0FBaEJBO0lBREMsS0FBSyxDQUFDLHVCQUF1QixDQUFDOztrRUFDQTtBQUZuQiwwQkFBMEI7SUFIdEMsU0FBUyxDQUFDO1FBQ1YsUUFBUSxFQUFFLHlCQUF5QjtLQUNuQyxDQUFDO3FDQU9ZLFVBQVU7UUFDTixhQUFhO0dBUGxCLDBCQUEwQixDQWtCdEM7U0FsQlksMEJBQTBCIiwiZmlsZSI6ImRpcmVjdGl2ZXMvc2Nyb2xsYWJsZS1jb250ZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNjcm9sbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuXHRzZWxlY3RvcjogJ1t2cC1zY3JvbGxhYmxlLWNvbnRlbnRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsYWJsZUNvbnRlbnREaXJlY3RpdmUge1xyXG5cdEBJbnB1dCgndnAtc2Nyb2xsYWJsZS1jb250ZW50JylcclxuXHRwcml2YXRlIHRhcmdldFNlbGVjdG9yOiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBzY3JvbGxUYXJnZXQ6IEhUTUxFbGVtZW50O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcblx0XHRwcml2YXRlIHNjcm9sbDogU2Nyb2xsU2VydmljZVxyXG5cdCkge31cclxuXHJcblx0bmdBZnRlclZpZXdJbml0KCkge1xyXG5cdFx0dGhpcy5zY3JvbGxUYXJnZXQgPSB0aGlzLnRhcmdldFNlbGVjdG9yID8gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50YXJnZXRTZWxlY3RvcikgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcblx0XHR0aGlzLnNjcm9sbC5iaW5kKHRoaXMuc2Nyb2xsVGFyZ2V0KTtcclxuXHR9XHJcblxyXG5cdG5nT25EZXN0cm95KCkge1xyXG5cdFx0dGhpcy5zY3JvbGwudW5iaW5kKHRoaXMuc2Nyb2xsVGFyZ2V0KTtcclxuXHR9XHJcbn0iXX0=
