var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Output, Input, EventEmitter } from '@angular/core';
import { defer, forEach } from 'lodash';
import { TriggerService } from '../services';
const SELECTOR = 'vp-in-view';
let InViewDirective = class InViewDirective {
    constructor(trigger, el) {
        this.trigger = trigger;
        this.el = el;
        this._config = new Config({});
        this.event = new EventEmitter();
    }
    set config(value) {
        forEach(value, (val, key) => {
            this._config[key] = val;
        });
    }
    get config() {
        return this._config;
    }
    ngAfterViewInit() {
        defer(() => {
            this.subs = this.trigger.observable.subscribe(this.handler.bind(this));
            this.handler();
        });
    }
    isInViewPort() {
        var rect = this.el.nativeElement.getBoundingClientRect();
        return (rect.top >= 0 - this._config.marginTop &&
            rect.left >= 0 - this._config.marginLeft &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) + this._config.marginBottom &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth) + this._config.marginRight);
    }
    handler() {
        if (this.isInViewPort()) {
            this.event.emit();
            !this.config.infinite && this.subs.unsubscribe();
        }
    }
};
__decorate([
    Output(SELECTOR),
    __metadata("design:type", Object)
], InViewDirective.prototype, "event", void 0);
__decorate([
    Input(SELECTOR + '-config'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], InViewDirective.prototype, "config", null);
InViewDirective = __decorate([
    Directive({
        selector: `[${SELECTOR}]`
    }),
    __metadata("design:paramtypes", [TriggerService,
        ElementRef])
], InViewDirective);
export { InViewDirective };
class Config {
    constructor(value) {
        this.marginTop = 0;
        this.marginBottom = 0;
        this.marginLeft = 0;
        this.marginRight = 0;
        this.infinite = false;
        forEach(value, (val, key) => {
            this[key] = val;
        });
    }
    set margin(value) {
        this.marginHorizontal = value;
        this.marginVertical = value;
    }
    set marginVertical(value) {
        this.marginTop = value;
        this.marginBottom = value;
    }
    set marginHorizontal(value) {
        this.marginLeft = value;
        this.marginRight = value;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvaW4tdmlldy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkYsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU3QyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFnQjlCLElBQWEsZUFBZSxHQUE1QjtJQU1DLFlBQ1MsT0FBdUIsRUFDdkIsRUFBYztRQURkLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3ZCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFQZixZQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFekIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFPbkMsQ0FBQztJQUdELElBQUksTUFBTSxDQUFDLEtBQUs7UUFDZixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDcEIsQ0FBQztJQUVELGVBQWU7UUFDZCxLQUFLLENBQUM7WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyxZQUFZO1FBQ25CLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFFekQsTUFBTSxDQUFDLENBQ04sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1lBQ3RDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUN4QyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWTtZQUN4RyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUNwRyxDQUFDO0lBQ0gsQ0FBQztJQUVPLE9BQU87UUFDZCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xELENBQUM7SUFDRixDQUFDO0NBQ0QsQ0FBQTtBQTVDQTtJQURDLE1BQU0sQ0FBQyxRQUFRLENBQUM7OzhDQUNrQjtBQVVuQztJQURDLEtBQUssQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDOzs7NkNBSzNCO0FBakJXLGVBQWU7SUFIM0IsU0FBUyxDQUFDO1FBQ1YsUUFBUSxFQUFFLElBQUksUUFBUSxHQUFHO0tBQ3pCLENBQUM7cUNBUWlCLGNBQWM7UUFDbkIsVUFBVTtHQVJYLGVBQWUsQ0ErQzNCO1NBL0NZLGVBQWU7QUFpRDVCO0lBT0MsWUFBWSxLQUFhO1FBTmxCLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQUNqQixlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsZ0JBQVcsR0FBRyxDQUFDLENBQUM7UUFDaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUd2QixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7WUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksY0FBYyxDQUFDLEtBQWE7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksZ0JBQWdCLENBQUMsS0FBYTtRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0NBQ0QiLCJmaWxlIjoiZGlyZWN0aXZlcy9pbi12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT3V0cHV0LCBJbnB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWZlciwgZm9yRWFjaCB9IGZyb20gJ2xvZGFzaCc7XHJcblxyXG5pbXBvcnQgeyBUcmlnZ2VyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzJztcclxuXHJcbmNvbnN0IFNFTEVDVE9SID0gJ3ZwLWluLXZpZXcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQ29uZmlnIHtcclxuXHRpbmZpbml0ZT86IGJvb2xlYW47XHJcblx0bWFyZ2luPzogbnVtYmVyO1xyXG5cdG1hcmdpbkhvcml6b250YWw/OiBudW1iZXI7XHJcblx0bWFyZ2luVmVydGljYWw/OiBudW1iZXI7XHJcblx0bWFyZ2luVG9wPzogbnVtYmVyO1xyXG5cdG1hcmdpbkJvdHRvbT86IG51bWJlcjtcclxuXHRtYXJnaW5MZWZ0PzogbnVtYmVyO1xyXG5cdG1hcmdpblJpZ2h0PzogbnVtYmVyO1xyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuXHRzZWxlY3RvcjogYFske1NFTEVDVE9SfV1gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJblZpZXdEaXJlY3RpdmUge1xyXG5cdHByaXZhdGUgX2NvbmZpZyA9IG5ldyBDb25maWcoe30pO1xyXG5cdEBPdXRwdXQoU0VMRUNUT1IpXHJcblx0cHJpdmF0ZSBldmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHRwcml2YXRlIHN1YnM6IFN1YnNjcmlwdGlvbjtcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRwcml2YXRlIHRyaWdnZXI6IFRyaWdnZXJTZXJ2aWNlLFxyXG5cdFx0cHJpdmF0ZSBlbDogRWxlbWVudFJlZlxyXG5cdCkge1xyXG5cdH1cclxuXHJcblx0QElucHV0KFNFTEVDVE9SICsgJy1jb25maWcnKVxyXG5cdHNldCBjb25maWcodmFsdWUpIHtcclxuXHRcdGZvckVhY2godmFsdWUsICh2YWwsIGtleSkgPT4ge1xyXG5cdFx0XHR0aGlzLl9jb25maWdba2V5XSA9IHZhbDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0IGNvbmZpZygpOklDb25maWcge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2NvbmZpZ1xyXG5cdH1cclxuXHJcblx0bmdBZnRlclZpZXdJbml0KCkge1xyXG5cdFx0ZGVmZXIoKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnN1YnMgPSB0aGlzLnRyaWdnZXIub2JzZXJ2YWJsZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVyLmJpbmQodGhpcykpO1xyXG5cdFx0XHR0aGlzLmhhbmRsZXIoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBpc0luVmlld1BvcnQoKTpib29sZWFuIHtcclxuXHRcdHZhciByZWN0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdHJlY3QudG9wID49IDAgLSB0aGlzLl9jb25maWcubWFyZ2luVG9wICYmXHJcblx0XHRcdHJlY3QubGVmdCA+PSAwIC0gdGhpcy5fY29uZmlnLm1hcmdpbkxlZnQgJiZcclxuXHRcdFx0cmVjdC5ib3R0b20gPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSArIHRoaXMuX2NvbmZpZy5tYXJnaW5Cb3R0b20gJiZcclxuXHRcdFx0cmVjdC5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSArIHRoaXMuX2NvbmZpZy5tYXJnaW5SaWdodFxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgaGFuZGxlcigpOnZvaWQge1xyXG5cdFx0aWYgKHRoaXMuaXNJblZpZXdQb3J0KCkpIHtcclxuXHRcdFx0dGhpcy5ldmVudC5lbWl0KCk7XHJcblx0XHRcdCF0aGlzLmNvbmZpZy5pbmZpbml0ZSAmJiB0aGlzLnN1YnMudW5zdWJzY3JpYmUoKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIENvbmZpZyBpbXBsZW1lbnRzIElDb25maWcge1xyXG5cdHB1YmxpYyBtYXJnaW5Ub3AgPSAwO1xyXG5cdHB1YmxpYyBtYXJnaW5Cb3R0b20gPSAwO1xyXG5cdHB1YmxpYyBtYXJnaW5MZWZ0ID0gMDtcclxuXHRwdWJsaWMgbWFyZ2luUmlnaHQgPSAwO1xyXG5cdHB1YmxpYyBpbmZpbml0ZSA9IGZhbHNlO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcih2YWx1ZTpJQ29uZmlnKSB7XHJcblx0XHRmb3JFYWNoKHZhbHVlLCAodmFsLCBrZXkpID0+IHtcclxuXHRcdFx0dGhpc1trZXldID0gdmFsO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRzZXQgbWFyZ2luKHZhbHVlOiBudW1iZXIpIHtcclxuXHRcdHRoaXMubWFyZ2luSG9yaXpvbnRhbCA9IHZhbHVlO1xyXG5cdFx0dGhpcy5tYXJnaW5WZXJ0aWNhbCA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IG1hcmdpblZlcnRpY2FsKHZhbHVlOiBudW1iZXIpIHtcclxuXHRcdHRoaXMubWFyZ2luVG9wID0gdmFsdWU7XHJcblx0XHR0aGlzLm1hcmdpbkJvdHRvbSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IG1hcmdpbkhvcml6b250YWwodmFsdWU6IG51bWJlcikge1xyXG5cdFx0dGhpcy5tYXJnaW5MZWZ0ID0gdmFsdWU7XHJcblx0XHR0aGlzLm1hcmdpblJpZ2h0ID0gdmFsdWU7XHJcblx0fVxyXG59Il19
